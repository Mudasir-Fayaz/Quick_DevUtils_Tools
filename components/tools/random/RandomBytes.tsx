"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { toast } from "@/hooks/use-toast"

export default function RandomBytes() {
  const [byteCount, setByteCount] = useState(16)
  const [outputFormat, setOutputFormat] = useState("hex")
  const [count, setCount] = useState(1)
  const [results, setResults] = useState<string[]>([])

  const generateBytes = () => {
    const newResults = []
    for (let i = 0; i < count; i++) {
      const bytes = new Uint8Array(byteCount)
      crypto.getRandomValues(bytes)
      let result: string = ""
      switch (outputFormat) {
        case "raw":
          result = Array.from(bytes).join(",")
          break
        case "hex":
          result = Array.from(bytes)
            .map((b) => b.toString(16).padStart(2, "0"))
            .join("")
          break
        case "base64":
          result = btoa(String.fromCharCode.apply(null, Array.from(bytes)))
          break
      }
      newResults.push(result)
    }
    setResults(newResults as string[])
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="byteCount">Number of bytes</Label>
          <Input
            id="byteCount"
            type="number"
            min={1}
            max={1024}
            value={byteCount}
            onChange={(e) => setByteCount(Number.parseInt(e.target.value))}
          />
        </div>
        <div>
          <Label htmlFor="outputFormat">Output format</Label>
          <Select value={outputFormat} onValueChange={setOutputFormat}>
            <SelectTrigger id="outputFormat">
              <SelectValue placeholder="Select output format" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="raw">Raw bytes</SelectItem>
              <SelectItem value="hex">Hex representation</SelectItem>
              <SelectItem value="base64">Base64</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="count">Number of byte sets to generate</Label>
          <Input
            id="count"
            type="number"
            min={1}
            max={100}
            value={count}
            onChange={(e) => setCount(Number.parseInt(e.target.value))}
          />
        </div>
        <Button onClick={generateBytes}>Generate Random Bytes</Button>
        {results.length > 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="space-y-2"
          >
            {results.map((result, index) => (
              <div key={index} className="p-4 bg-secondary rounded-md flex justify-between items-center">
                <p className="text-lg font-mono break-all">{result}</p>
                <Button
                  variant="outline"
                  onClick={() => {
                    navigator.clipboard.writeText(result)
                    toast({
                      title: "Copied to clipboard",
                      description: "The generated bytes have been copied to your clipboard.",
                    })
                  }}
                >
                  Copy
                </Button>
              </div>
            ))}
          </motion.div>
        )}
      </div>
    </motion.div>
  )
}

